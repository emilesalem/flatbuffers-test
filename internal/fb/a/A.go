// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package a

import (
	flatbuffers "github.com/google/flatbuffers/go"

	test__flatbuffers__internal__fb__b "test/flatbuffers/internal/fb/b"
)

type A struct {
	_tab flatbuffers.Table
}

func GetRootAsA(buf []byte, offset flatbuffers.UOffsetT) *A {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &A{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *A) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *A) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *A) FieldOne() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *A) FieldTwo(obj *test__flatbuffers__internal__fb__b.B) *test__flatbuffers__internal__fb__b.B {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(test__flatbuffers__internal__fb__b.B)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func AStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AAddFieldOne(builder *flatbuffers.Builder, fieldOne flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fieldOne), 0)
}
func AAddFieldTwo(builder *flatbuffers.Builder, fieldTwo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fieldTwo), 0)
}
func AEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
